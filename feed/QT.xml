<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Adoo's blog</title><link href="http://www.roading.org/" rel="alternate"></link><link href="http://www.roading.org/feed/QT.xml" rel="self"></link><id>http://www.roading.org/</id><updated>2012-02-24T15:34:00+08:00</updated><entry><title>Qt Quick 笔记（2）：用户界面相关</title><link href="http://www.roading.org//develop/cpp/qt/qt-quick-%e7%ac%94%e8%ae%b0%ef%bc%882%ef%bc%89%ef%bc%9a%e7%94%a8%e6%88%b7%e7%95%8c%e9%9d%a2%e7%9b%b8%e5%85%b3.html" rel="alternate"></link><updated>2012-02-24T15:34:00+08:00</updated><author><name>Adoo</name></author><id>tag:www.roading.org,2012-02-24:/develop/cpp/qt/qt-quick-%e7%ac%94%e8%ae%b0%ef%bc%882%ef%bc%89%ef%bc%9a%e7%94%a8%e6%88%b7%e7%95%8c%e9%9d%a2%e7%9b%b8%e5%85%b3.html</id><summary type="html">&lt;p&gt;&lt;em&gt;笔记概要：1.Nested Elements.2.Graphical elements. 3. Text Elements.
4.Anchor Layouts&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;font style="font-weight: normal"&gt;Nested ELements&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;在QML中的 UI 元素是以树形结构组织的,因此“&lt;em&gt;Elements are often
nested&lt;/em&gt;”——也就是说，一个元素可以包含很多个其它元素。&lt;/p&gt;
&lt;p&gt;一个例子：&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
    点击展开代码import QtQuick 1.1
    Rectangle{
        width: 400 ; height: 300
        color:"gray"
        Rectangle{
            x:50; y: 50
            width:300; height: 200
            color: "lightblue"
            Rectangle{
                x:50 ; y: 50
                width: 200 ; height: 100;
                color:"red"
            }
        }
    }

&lt;/div&gt;

&lt;p&gt;上例中浅蓝色和红色的矩形都是“Nested
Element”，通过右边的显示效果可以看出，每一个“Nested
Element”设定的位置都是相对于父元素的，而不是绝对位置。&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;font style="font-weight: normal"&gt;&lt;/font&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;font style="font-weight: normal"&gt;Graphical Elements&lt;/font&gt;&lt;/h3&gt;
&lt;p&gt;三种要讨论的元素： Colors, gradients and images.
通过这三种元素可以创建起具有吸引力的 UI 。&lt;/p&gt;
&lt;h4&gt;Colors:可以用三种方式来设置：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;直接用一个颜色名字的字符串来表示：例如 "red","blue""lightblue"…&lt;/li&gt;
&lt;li&gt;直接用一个6位的十六进制字符串来表示：例如
    "#ff00ff"，六位中每两位代表三原色中的一种，其顺序为红绿蓝。&lt;/li&gt;
&lt;li&gt;使用一个函数来进行设置。如：Qt.rgba(0, 0.75, 0 , 1).
    其中四个参数的范围应该都在 0 到 1
    之间。前三个参数表示三原色，后一个参数表示&lt;font style="background-color: #ffff00"&gt;不&lt;/font&gt;透明度。&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种方法的实例：&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
    点击展开代码import QtQuick 1.1 
    Item{
        width:150;  height: 50
        Rectangle{
            width:50; height: 50
            color: "red"
        }
        Rectangle{
            x:50 ; y:0
            width: 50 ; height:50;
            color: "#00ff00"
        }
        Rectangle{
            x:100 ; y: 0
            width: 50 ; height: 50;
            color:Qt.rgba(0,0,1,1)
        }
    }

&lt;/div&gt;

&lt;p&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h4&gt;Images&lt;/h4&gt;
&lt;p&gt;可以看下面一个关于图像的实例，将呈现一幅图片，并且在点击图片的时候会将图片放大两倍并以右下角为轴心旋转45度。&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
    点击展开代码import QtQuick 1.1
    Rectangle {
        width: 200 ; height: 200
        color: "gray"
       Image{
           anchors.centerIn: parent
           source: "../捕获.PNG"
           transformOrigin: Item.Center
           MouseArea{
               anchors.fill: parent
               onClicked: {
                   parent.scale=2
                   parent.rotation=45
               }
           }
       }
    }

&lt;/div&gt;

&lt;p&gt;Image 的长宽由图像决定。其路径用 source
来设定，可以用绝对路径也可以使用相对路径，当然网路图片也是可以的。”../”表示父级目录。
用 scale 来设定放大的倍数，用tansformOrigin 来设定旋转的轴心。 rotation
可以用来设定旋转的度数。&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;h4&gt;&lt;span style="display: none" id="Code_Open_Text_948418"&gt;Gradient&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;&lt;span style="display: none"&gt;实例：&lt;/p&gt;
&lt;p class="cnblogs_code"&gt;
    点击展开代码import QtQuick 1.1
    Rectangle {
        width: 200 ; height: 400
        gradient: Gradient{
            GradientStop{
                position: 0.0
                color: "blue"
            }
            GradientStop{
                position: 1.0
                color:  "black"
            }
        }
    }

如上例所示，可以用一个 gradient 属性来设置渐变。用 Gradient
来作为其值。Gradient 可以包含一个或更多的 GradientStop 。 每一个
GradientStop 包含一个position 属性 和一个 color 属性。position
属性的值，只能从0到1。

设置 gradient 属性后， color 属性将被覆盖掉。

gradient 的缺点: 官方推荐使用渐变的图片来代替 gradient，因为 gradient
会占用大量的 cpu ，并且渐变的效果可能并没有你期望的那么生动。

### &lt;font style="font-weight: normal"&gt;文本&lt;/font&gt;

qml中的文本既可以用来呈现文本，同时也能进行文本的输入。

用 Text 来简单呈现文本：

&lt;div class="cnblogs_code"&gt;
    点击展开代码import QtQuick 1.1
    Rectangle {
        width: 200 ; height: 100
        color: "gray"
        Text{
            text: "&lt;h1&gt;我本将心向明月，奈何明月照沟渠。&lt;/h1&gt;"
            font.family: "楷体"
            color:"white"
        }
    }

&lt;/div&gt;
Text 支持简单的文本呈现，同时它也支持富文本的显示。如上例中我就用了
&lt;h2\&gt;…&lt;/h2\&gt; 这对标签。

用 TextInput 来接受文本的录入：

&lt;div class="cnblogs_code"&gt;
    点击展开代码import QtQuick 1.1
    Rectangle{
        width: 300; height: 200;
        color:"black"
        TextInput{
            color: "white"
            width: 200;
            font.pixelSize: 16
            text:"举杯邀明月，对影成三人..."
        }
    }

&lt;/div&gt;
&lt;/span&gt;&lt;span style="display: none" id="Code_Open_Text_14480"&gt;

一个很简单的文本输入控件，没有任何的装饰。如果没有设置它的宽度的时候，其宽度会随着字串的长度而改变。

### &lt;font style="font-weight: normal"&gt;Anchors&lt;/font&gt;

我们知道可以用 x 与 y 属性来确定元素相对于其父亲的位置。使用Anchors
则是另外一个重要的布局手段，Anchors 主要用来定位和对齐元素。

位置视图：(另外还有 centerIn 和 fill )

[![image][]][]

&lt;div class="cnblogs_code"&gt;
一个实例：直接关联到其父

&lt;/div&gt;
&lt;div class="cnblogs_code"&gt;
    点击展开代码import QtQuick 1.1
    Rectangle {
        width: 200 ;    height: 150
        color: "lightblue"
        Rectangle{
            width: 50;  height: 50
            color:"gray"
            anchors.centerIn: parent
        }
    }

&lt;/div&gt;
&lt;/span&gt;

&lt;div class="cnblogs_code"&gt;
&lt;span style="display: none"&gt;&lt;/span&gt;也可以关联到其父亲的
Anchors,此时这样写： anchors.right: parent.right
不需要(也不能)这样：anchors.right : parent.anchors.right

&lt;/div&gt;
&lt;div class="cnblogs_code"&gt;
Anchors 也可以用来对边缘留白,示意图如下：

&lt;/div&gt;
&lt;div class="cnblogs_code"&gt;
[![image][1]][]

&lt;/div&gt;
&lt;div class="cnblogs_code"&gt;
用法则与上面的 right ,left 之类的如出一辙。

&lt;/div&gt;
&lt;div class="cnblogs_code"&gt;
摘录一段关于 Anchors 的忠告，以及使用策略。

&lt;/div&gt;
&gt; #### &lt;font style="font-weight: bold"&gt;Hints and Tips – Anchors&lt;/font&gt;
&gt;
&gt; -   Anchors can only be used with parent and sibling items
&gt; -   Anchors work on constraints
&gt;     -   some items need to have well-defined positions and sizes
&gt;     -   items without default sizes should be anchored to fixed
&gt;         orwell-defined items
&gt;
&gt; -   Anchors creates dependencies on geometries of other items
&gt;     -   creates an order in which geometries are calculated
&gt;     -   avoid creating circular dependencies
&gt;
&gt;     -   e.g., parent!child!parent
&gt;
&gt; -   Margins are only used if the corresponding anchors are used
&gt;     -   e.g.,leftMarginneedsleftto be defined
&gt;
&gt; #### &lt;font style="font-weight: bold"&gt;Strategies for Use – Anchors&lt;/font&gt;
&gt;
&gt; Identify item with different roles in the user interface:
&gt;
&gt; -   Fixed items
&gt;     -   make sure these have id properties defined
&gt;     -   unless these items can easily be referenced as parent items
&gt;
&gt; -   Items that dominate the user interface
&gt;     -   make sure these have id properties defined
&gt;
&gt; -   Items that react to size changes of the dominant items
&gt;     -   give these anchors that refer to the dominant or fixed items
&gt;
参考资料：[Qt Quick for C++ Developers][]

*欢迎你与我交流探讨，若有错误疏漏之处，恳请指正。*

*2012/2/23 By Adoo | Homepage:*[*www.roading.org*][]

  [image]: http://www.roading.org/wp-content/uploads/2012/02/image_thumb8.png
    "image"
  [![image][]]: http://www.roading.org/wp-content/uploads/2012/02/image8.png
  [1]: http://www.roading.org/wp-content/uploads/2012/02/image_thumb10.png
    "image"
  [![image][1]]: http://www.roading.org/wp-content/uploads/2012/02/image10.png
  [Qt Quick for C++ Developers]: http://qt.nokia.com/learning/online/training/materials/qt-essentials-qt-quick-edition
    "http://qt.nokia.com/learning/online/training/materials/qt-essentials-qt-quick-edition"
  [*www.roading.org*]: http://www.roading.org</summary><category term="qml"></category><category term="QT"></category><category term="qt quick"></category></entry><entry><title>Qt Quick 笔记（1）：初识 Qt Quick</title><link href="http://www.roading.org//develop/cpp/qt/%e5%88%9d%e8%af%86-qt-quick.html" rel="alternate"></link><updated>2012-02-23T16:45:00+08:00</updated><author><name>Adoo</name></author><id>tag:www.roading.org,2012-02-23:/develop/cpp/qt/%e5%88%9d%e8%af%86-qt-quick.html</id><summary type="html">&lt;h3&gt;废语开篇&lt;/h3&gt;
&lt;p&gt;在大二的时候思索着学习一界面库，为此煞费脑经。其中有试过十来天的 QT学习,
不过最后为 WPF 而沦陷，确实 WPF
界面与逻辑的分离让我很是向往。不过可惜的是 WPF 并不原生支持 与 C++
的交互，以致我不得不学习一些 C# 。又四处求医问药——获得 native code 与
manage code 交互的良方。这之间寻寻觅觅，虽然也算终于达成所愿——可以用 C++
与 WPF 来完成一些小程序编写了。
但是这注定是一种非主流的配置，主流与否，我虽然不在意。只是结果并不如我想的那般理想。用
C++ 与 WPF
来开发并没有带来效率的提升以及逻辑的简化——这些成本都被转移到了他们之间的交互上，更大的成本其实在于学习的代价——
C#、C++/cli 、P/invoke… 有意思的是似乎转了一圈，又要回到 QT
上来。为什么要回到QT? 没有太多理由——公司用的最主要的界面库就是 QT。
当然这一切并未有让我有哪怕些须遗憾。我一直坚信，所有的弯路都有其价值。何况
win8 确切会支持 C++ 与 xaml
的交互——我已经尝试了一下。但是对于相关的系统学习可能要推后一些了。而 QT
会是接下来不短一段时间的主旋律了。不过可喜之处在于，Qt Quick 甚合我意。&lt;/p&gt;
&lt;h3&gt;What is Qt Quick ？&lt;/h3&gt;
&lt;p&gt;看一下诺基亚的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Qt Quick is a UI creation technology designed to enable developers and
UI designers to work together to create animated, touch-enabled UIs
and applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，Qt Quick 将界面与逻辑很好的分离。&lt;a href="http://qt.nokia.com/products/library/qt-quick"&gt;更多…&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Qt Quick 有一下组成部分：&lt;/p&gt;
&lt;p&gt;Qt Quick consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QML: 一种用来撰写界面的声明式语言，很简单，很像CSS.&lt;/li&gt;
&lt;li&gt;Qt Viewer: 用来加载 qml 文件。&lt;/li&gt;
&lt;li&gt;Qt Declarative Module: 一个 Qt 库中的新模块，用它可以很好的使得 QML
    与 C++交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What is QML?&lt;/h3&gt;
&lt;p&gt;qml
是一种被设计为用来描述用户界面的声明式语言：包括用户界面的摸样和以及行为。&lt;/p&gt;
&lt;p&gt;在 qml 的世界中，UI 元素被组织成树形结构，UI
元素可以包含其许多子元素，但却只有一个父亲。&lt;/p&gt;
&lt;p&gt;一个简单的例子：&lt;/p&gt;
&lt;div class="cnblogs_code"&gt;
    展开代码import QtQuick 1.1
    Rectangle{
        width: 200; height: 150
        color: "lightblue"
    }

&lt;/div&gt;

&lt;p&gt;&lt;/span&gt;&lt;span style="display: none" id="Code_Open_Text_139556"&gt;&lt;/p&gt;
&lt;p&gt;[&lt;img alt="image" src="http://www.roading.org/wp-content/uploads/2012/02/image_thumb.png" title="image" /&gt;][]&lt;/p&gt;
&lt;p&gt;上面的代码声明了一个矩形，并设定了它的长宽以及颜色，其效果图如右。具体分析：&lt;/p&gt;
&lt;p&gt;import 可以用来导入相关模块，这儿要使用Qt quick
的功能，自然要导入相关模块。后面跟的1.1是版本号。规定版本号的优势在于可以只导入对应的版本。因此程序中只能使用对应版本的功能。这样一来就可以使得程序不受旧版本或新版本的影响。在新版本发布后也保存了对旧版本的支持。&lt;/p&gt;
&lt;p&gt;声明了一个 Rectangle 元素 ，紧接着的{}表示在其中的属性都属于描述
Rectangle。可直接用属性的名字和值来设定属性：
&lt;font color="#d19049"&gt;&lt;font style="background-color: #ffffff"&gt;name&lt;/font&gt;
&lt;/font&gt;: value 。属性之间用换行符或分号来分隔。注释的方式与 C++
相同，可以用 “//”与“/* … */ ”两种形式。&lt;/p&gt;
&lt;p&gt;QML 中的元素（elements）可以分为可视化元素和不可见元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的可视化元素都继承自 item, 它们一般都有关于位置和尺寸的属性。像
    Recatangle 、Text 、InputText…&lt;/li&gt;
&lt;li&gt;不可见元素有 states、 transitions…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;元素拥有一些属性，同时属性用以描述元素。当然，也可以对元素扩展一些自定义的属性。&lt;/p&gt;
&lt;p&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div align="right"&gt;

&lt;/div&gt;

&lt;div align="right"&gt;

&lt;/div&gt;

&lt;div align="right"&gt;

&lt;/div&gt;

&lt;div align="right"&gt;

&lt;/div&gt;

&lt;div align="right"&gt;

&lt;/div&gt;

&lt;div align="right"&gt;
*欢迎你与我交流探讨，若有错误疏漏之处，恳请指正。*

&lt;/div&gt;

&lt;div align="right"&gt;
*2012/2/23 By Adoo | Homepage:*[*www.roading.org*][]

&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;[&lt;img alt="image" src="http://www.roading.org/wp-content/uploads/2012/02/image_thumb.png" title="image" /&gt;]: http://www.roading.org/wp-content/uploads/2012/02/image.png&lt;/p&gt;</summary><category term="qml"></category><category term="QT"></category><category term="qt quick"></category></entry></feed>