<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Adoo's blog</title><link href="http://www.roading.org/" rel="alternate"></link><link href="http://www.roading.org/feed/QT.xml" rel="self"></link><id>http://www.roading.org/</id><updated>2012-02-24T15:34:00+08:00</updated><entry><title>Qt Quick 笔记（2）——用户界面相关</title><link href="http://www.roading.org//Qt/about-ui.html" rel="alternate"></link><updated>2012-02-24T15:34:00+08:00</updated><author><name>Adoo</name></author><id>tag:www.roading.org,2012-02-24:/Qt/about-ui.html</id><summary type="html">&lt;h3&gt;Nested ELements&lt;/h3&gt;
&lt;p&gt;在QML中的 UI 元素是以树形结构组织的,因此“&lt;em&gt;Elements are often nested&lt;/em&gt;”——也就是说，
一个元素可以包含很多个其它元素。&lt;/p&gt;
&lt;p&gt;一个例子：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt; 
&lt;span class="nx"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
    &lt;span class="k"&gt;color:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;x:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;y:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
        &lt;span class="k"&gt;width:&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
        &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lightblue&amp;quot;&lt;/span&gt;
        &lt;span class="nx"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;x:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;y:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
            &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;color:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上例中浅蓝色和红色的矩形都是“Nested Element”，通过右边的显示效果可以看出，每一个
“Nested Element”设定的位置都是相对于父元素的，而不是绝对位置。&lt;/p&gt;
&lt;h3&gt;Graphical Elements&lt;/h3&gt;
&lt;p&gt;三种要讨论的元素： Colors, gradients and images。通过这三种元素可以创建起具有吸
引力的 UI 。&lt;/p&gt;
&lt;h4&gt;Colors:可以用三种方式来设置：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;直接用一个颜色名字的字符串来表示：例如 "red","blue"",lightblue"…&lt;/li&gt;
&lt;li&gt;直接用一个6位的十六进制字符串来表示：例如&lt;code&gt;#ff00ff&lt;/code&gt;，六位中每两位代表三原色中
    的一种，其顺序为红绿蓝。&lt;/li&gt;
&lt;li&gt;使用一个函数来进行设置。如：Qt.rgba(0, 0.75, 0 , 1)。其中四个参数的范围应该
    都在0到1之间。前三个参数表示三原色，后一个参数表示&lt;strong&gt;不&lt;/strong&gt;透明度。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种方法的实例：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt; 
&lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width:&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
    &lt;span class="nx"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;width:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
        &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;x:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;y:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#00ff00&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;x:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;y:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;color:&lt;/span&gt;&lt;span class="nx"&gt;Qt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Images&lt;/h4&gt;
&lt;p&gt;可以看下面一个关于图像的实例，这个实例将呈现一幅图片，并且在点击图片的时候会将图
片放大两倍并以右下角为轴心旋转45度。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
    &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;
   &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;anchors.centerIn:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;
       &lt;span class="k"&gt;source:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;../捕获.PNG&amp;quot;&lt;/span&gt;
       &lt;span class="k"&gt;transformOrigin:&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Center&lt;/span&gt;
       &lt;span class="nx"&gt;MouseArea&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;anchors.fill:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;
           &lt;span class="k"&gt;onClicked:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
               &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Image的长宽由图像决定。其路径用source来设定，可以用绝对路径也可以使用相对路径，
当然网路图片也是可以的。”../”表示父级目录。用scale来设定放大的倍数，用
tansformOrigin 来设定旋转的轴心。rotation可以用来设定旋转的度数。  &lt;/p&gt;
&lt;h4&gt;Gradient&lt;/h4&gt;
&lt;p&gt;实例：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
    &lt;span class="k"&gt;gradient:&lt;/span&gt; &lt;span class="nx"&gt;Gradient&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;GradientStop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;position:&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
            &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;GradientStop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;position:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
            &lt;span class="k"&gt;color:&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如上例所示，可以用一个gradient属性来设置渐变。用Gradient来作为其值。Gradient可以
包含一个或更多的GradientStop 。每一个GradientStop包含一个position属性和一个color
属性。position属性的值，只能从0到1。&lt;/p&gt;
&lt;p&gt;设置gradient属性后，color属性将被覆盖掉。&lt;/p&gt;
&lt;p&gt;官方推荐使用渐变的图片来代替gradient，因为gradient会占用大量的cpu，并且渐变的效
果可能并没有你期望的那么生动。&lt;/p&gt;
&lt;h3&gt;文本&lt;/h3&gt;
&lt;p&gt;qml中的文本既可以用来呈现文本，同时也能进行文本的输入。&lt;/p&gt;
&lt;p&gt;用 Text 来简单呈现文本：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;text:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;我本将心向明月，奈何明月照沟渠。&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;font.family:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;楷体&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;color:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Text 支持简单的文本呈现，同时它也支持富文本的显示。如上例中我就用了
&lt;code&gt;&amp;lt;h1&amp;gt;…&amp;lt;/h1&amp;gt;&lt;/code&gt;这对标签。&lt;/p&gt;
&lt;p&gt;用 TextInput 来接受文本的录入：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="nx"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;TextInput&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;font.pixelSize:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
        &lt;span class="k"&gt;text:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;举杯邀明月，对影成三人...&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个很简单的文本输入控件，没有任何的装饰。如果没有设置它的宽度的时候，其宽度会
随着字串的长度而改变。&lt;/p&gt;
&lt;h3&gt;Anchors&lt;/h3&gt;
&lt;p&gt;我们知道可以用x与y属性来确定元素相对于其父亲的位置。使用Anchors则是另外一个重要
的布局手段，Anchors 主要用来定位和对齐元素。&lt;/p&gt;
&lt;p&gt;位置示意图：(另外还有centerIn和fill)&lt;/p&gt;
&lt;p&gt;&lt;img alt="位置示意图" src="http://www.roading.org/images/2012-02/image_thumb8.png" /&gt;&lt;/p&gt;
&lt;p&gt;一个实例：直接关联到其父&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="nx"&gt;Rectangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;
    &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lightblue&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
        &lt;span class="k"&gt;color:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;anchors.centerIn:&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可以关联到其父亲的Anchors,此时这样写:&lt;code&gt;anchors.right: parent.right&lt;/code&gt;不需要(也不
能)这样：&lt;code&gt;anchors.right : parent.anchors.right&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Anchors 也可以用来对边缘留白,示意图如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.roading.org/images/2012-02/image_thumb10.png" /&gt;&lt;/p&gt;
&lt;p&gt;用法则与上面的 right ,left 之类的如出一辙。&lt;/p&gt;
&lt;p&gt;摘录一段关于 Anchors 的忠告，以及使用策略。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4&gt;Hints and Tips – Anchors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Anchors can only be used with parent and sibling items&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anchors work on constraints&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some items need to have well-defined positions and sizes&lt;/li&gt;
&lt;li&gt;items without default sizes should be anchored to fixed
    orwell-defined items&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anchors creates dependencies on geometries of other items&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;creates an order in which geometries are calculated&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;avoid creating circular dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;e.g., parent!child!parent&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Margins are only used if the corresponding anchors are used&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g.,leftMarginneedsleftto be defined&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Strategies for Use – Anchors&lt;/h4&gt;
&lt;p&gt;Identify item with different roles in the user interface:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed items&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make sure these have id properties defined&lt;/li&gt;
&lt;li&gt;unless these items can easily be referenced as parent items&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Items that dominate the user interface&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make sure these have id properties defined&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Items that react to size changes of the dominant items&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;give these anchors that refer to the dominant or fixed items&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考资料：&lt;a href="http://qt.nokia.com/learning/online/training/materials/qt-essentials-qt-quick-edition"&gt;Qt Quick for C++ Developers&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
          &lt;p style= "text-align:right;"&gt;&lt;em&gt;
          周五 24 二月 2012 By &lt;a href="http://www.roading.org/pages/about-me.html"&gt;Adoo&lt;/a&gt;
          (&lt;a href = "http://www.roading.org/pages/message.html"&gt;Contact me&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
          &lt;p style="text-align:right;"&gt;&lt;em&gt;欢迎你与我交流探讨，如有错误疏漏之处，恳请指正。
          (&lt;a href="http://www.roading.org/Qt/about-ui.html"&gt;本文原链&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
        </summary><category term="qml"></category><category term="QT"></category><category term="qt quick"></category><category term="笔记"></category></entry><entry><title>Qt Quick 笔记（1）：初识 Qt Quick</title><link href="http://www.roading.org//develop/cpp/qt/%e5%88%9d%e8%af%86-qt-quick.html" rel="alternate"></link><updated>2012-02-23T16:45:00+08:00</updated><author><name>Adoo</name></author><id>tag:www.roading.org,2012-02-23:/develop/cpp/qt/%e5%88%9d%e8%af%86-qt-quick.html</id><summary type="html">&lt;h3&gt;废语开篇&lt;/h3&gt;
&lt;p&gt;在大二的时候思索着学习一界面库，为此煞费脑经。其中有试过十来天的Qt学习,不过最后为
WPF而沦陷，确实WPF界面与逻辑的分离让我很是向往。不过可惜的是WPF并不原生支持与C++
的交互，以致我不得不学习一些C# 。又四处求医问药——获得native code与manage code交互
的良方。这之间寻寻觅觅，虽然也算终于达成所愿——可以用C++与WPF 来完成一些小程序编写
了。但是这注定是一种非主流的配置，主流与否，我虽然不在意。只是结果并不如我想的那般
理想。用C++与WPF来开发并没有带来效率的提升以及逻辑的简化——这些成本都被转移到了他们
之间的交互上，更大的成本其实在于学习的代价——C#、C++/cli 、P/invoke… 有意思的是似乎
转了一圈，又要回到QT上来。为什么要回到QT? 没有太多理由——公司用的最主要的界面库就是
Qt。当然这一切并未有让我有哪怕些须遗憾。我一直坚信，所有的弯路都有其价值。何况win8
确切会支持C++与xaml的交互——我已经尝试了一下。但是对于相关的系统学习可能要推后一些了。
而Qt会是接下来不短一段时间的主旋律了。不过可喜之处在于，Qt Quick 甚合我意。&lt;/p&gt;
&lt;h3&gt;What is Qt Quick ？&lt;/h3&gt;
&lt;p&gt;看一下诺基亚的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Qt Quick is a UI creation technology designed to enable developers and UI 
designers to work together to create animated, touch-enabled UIs and applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，Qt Quick将界面与逻辑很好的分离。&lt;a href="http://qt.nokia.com/products/library/qt-quick"&gt;更多…&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Qt Quick有以下组成部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;QML: 一种用来撰写界面的声明式语言，很简单，很像CSS.&lt;/li&gt;
&lt;li&gt;Qt Viewer: 用来加载qml文件。&lt;/li&gt;
&lt;li&gt;Qt Declarative Module:一个 Qt 库中的新模块，用它可以很好的使得QML与 C++交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What is QML?&lt;/h3&gt;
&lt;p&gt;qml是一种被设计为用来描述用户界面的声明式语言：包括用户界面的摸样和以及行为。在
qml的世界中，UI元素被组织成树形结构，UI元素可以包含其许多子元素，但却只有一个父
亲。&lt;/p&gt;
&lt;p&gt;一个简单的例子：&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QtQuick&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;span class="nx"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt;
    &lt;span class="k"&gt;color:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lightblue&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码声明了一个矩形，并设定了它的长宽以及颜色，其效果图如下。&lt;/p&gt;
&lt;p&gt;&lt;img alt="示意图" src="http://www.roading.org/images/2012-02/image_thumb.png" /&gt;&lt;/p&gt;
&lt;p&gt;import可以用来导入相关模块，这儿要使用Qt quick的功能，自然要导入相关模块。后面跟的
1.1是版本号。规定版本号的优势在于可以只导入对应的版本。因此程序中只能使用对应版本的
功能。这样一来就可以使得程序不受旧版本或新版本的影响。在新版本发布后也保存了对旧版
本的支持。&lt;/p&gt;
&lt;p&gt;声明了一个Rectangle元素，紧接着的{}表示在其中的属性都属于描述Rectangle。可直接用属
性的名字和值来设定属性：&lt;code&gt;name: value&lt;/code&gt;。属性之间用换行符或分号来分隔。注释的方式与
C++相同，可以用 “//”与“/* … */ ”两种形式。&lt;/p&gt;
&lt;p&gt;QML中的元素（elements）可以分为可视化元素和不可见元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有的可视化元素都继承自item, 它们一般都有关于位置和尺寸的属性。像Recatangle 、
    Text 、InputText…&lt;/li&gt;
&lt;li&gt;不可见元素有states、transitions…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;元素拥有一些属性，同时属性用以描述元素。当然，也可以对元素扩展一些自定义的属性。&lt;/p&gt;
          &lt;p style= "text-align:right;"&gt;&lt;em&gt;
          周四 23 二月 2012 By &lt;a href="http://www.roading.org/pages/about-me.html"&gt;Adoo&lt;/a&gt;
          (&lt;a href = "http://www.roading.org/pages/message.html"&gt;Contact me&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
          &lt;p style="text-align:right;"&gt;&lt;em&gt;欢迎你与我交流探讨，如有错误疏漏之处，恳请指正。
          (&lt;a href="http://www.roading.org/develop/cpp/qt/%e5%88%9d%e8%af%86-qt-quick.html"&gt;本文原链&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
        </summary><category term="qml"></category><category term="QT"></category><category term="qt quick"></category></entry></feed>